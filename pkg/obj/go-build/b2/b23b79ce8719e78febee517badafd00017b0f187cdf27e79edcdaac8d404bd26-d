// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/jx/work/src/golang/go-sw64-1.16.4/misc/cgo/test/issue6997_linux.go:1:1
// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build !android

// Test that pthread_cancel works as expected
// (NPTL uses SIGRTMIN to implement thread cancelation)
// See https://golang.org/issue/6997
package cgotest

/*
#cgo CFLAGS: -pthread
#cgo LDFLAGS: -pthread
extern int StartThread();
extern int CancelThread();
*/
import _ "unsafe"

import "testing"
import "time"

func test6997(t *testing.T) {
	r := ( /*line :24:7*/_Cfunc_StartThread /*line :24:19*/)()
	if r != 0 {
		t.Error("pthread_create failed")
	}
	c := make(chan  /*line :28:17*/_Ctype_int /*line :28:22*/)
	go func() {
		time.Sleep(500 * time.Millisecond)
		c <- ( /*line :31:8*/_Cfunc_CancelThread /*line :31:21*/)()
	}()

	select {
	case r = <-c:
		if r == 0 {
			t.Error("pthread finished but wasn't canceled??")
		}
	case <-time.After(30 * time.Second):
		t.Error("hung in pthread_cancel/pthread_join")
	}
}
